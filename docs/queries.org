# -*- orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--dprp-1-0; orgstrap-block-checksum: ad0adb718dc286ea0f7ac5b6926eb433497ad7c7da7013081394ddf9bc1c9fc2; -*-
# [[orgstrap][jump to the orgstrap block for this file]]

#+name: orgstrap-shebang
#+begin_src bash :eval never :results none :exports none
set -e "-C" "-e" "-e"
{ null=/dev/null;} > "${null:=/dev/null}"
{ args=;file=;MyInvocation=;__p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > "${null}"
$file = $MyInvocation.MyCommand.Source
{ file=$0;PATH=$__op;rm ${__p}/=;rmdir ${__p};} > "${null}"
emacs -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv)) enable-local-variables) (find-file-literally file) (end-of-line) (when (eq (char-before) ?\^m) (let ((coding-system-for-read 'utf-8)) (revert-buffer nil t t)))) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode) find-file-literally) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- ${args} "${@}"
exit
<# powershell open
#+end_src

* sql
:PROPERTIES:
:header-args:sql+: :engine postgresql
:header-args:sql+: :dbhost localhost
:header-args:sql+: :dbuser quantdb-user
:header-args:sql+: :database quantdb_test
:END:
** scratch
#+begin_src sql
-- write queries here
#+end_src

** examples
*** get_all_values_example
#+begin_src sql
select * from get_all_values_example() where agg_type in ('min', 'max') order by value limit 10;
#+end_src

#+RESULTS:
|                value | ... | aspect_o_pred                             | agg_type | inst_desc    | formal_id    | ... | subject_id | dset          | obj           |
|----------------------+-----+-------------------------------------------+----------+--------------+--------------+-----+------------+---------------+---------------|
|                  0.0 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-l-seg-c1 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|                  0.0 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-r-seg-c1 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
| 0.029325513196480937 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-l-seg-c2 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
| 0.029325513196480937 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-r-seg-c2 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.03225806451612903 |     | distance-via-reva-ft-sample-id-normalized | max      | nerve-volume | sam-r-seg-c1 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.03225806451612903 |     | distance-via-reva-ft-sample-id-normalized | max      | nerve-volume | sam-l-seg-c1 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.05865102639296187 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-r-seg-c3 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.05865102639296187 |     | distance-via-reva-ft-sample-id-normalized | min      | nerve-volume | sam-l-seg-c3 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.06158357771260997 |     | distance-via-reva-ft-sample-id-normalized | max      | nerve-volume | sam-r-seg-c2 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |
|  0.06158357771260997 |     | distance-via-reva-ft-sample-id-normalized | max      | nerve-volume | sam-l-seg-c2 |     | sub-f001   | aa43 ... 8afc | 59ca ... 11bc |

** admin
:PROPERTIES:
:header-args:sql+: :dbuser quantdb-admin
:END:
#+begin_src sql
-- run admin queries here, e.g. defining functions

#+end_src

* Bootstrap :noexport:
#+name: orgstrap
#+begin_src elisp :results none :exports none :lexical yes
(defun get-sql-insert-ocdn ()
  (with-temp-buffer
    (insert-file-contents-literally "../sql/inserts.sql")
    (evil-ex-substitute (point-min) (point-max) '(";") " ON CONFLICT DO NOTHING;")
    (buffer-string)))

(defun qdb-get-config (auth-var)
  (with-temp-buffer
    (let ((process-environment
           (cons (format "PYTHONPATH=%s:${PYTHONPATH}" (expand-file-name ".."))
                 process-environment)))
      (call-process
       "python" nil (current-buffer) nil "-c"
       (format "from quantdb.config import auth; print(auth.get('%s'), end='')" auth-var)))
    (buffer-string)))

(defun org-babel-sql-expand-vars (body vars &optional sqlite)
  "Expand the variables held in VARS in BODY.

If SQLITE has been provided, prevent passing a format to
`orgtbl-to-csv'.  This prevents overriding the default format, which if
there were commas in the context of the table broke the table as an
argument mechanism."
  (mapc
   (lambda (pair)
     (setq body
	   (replace-regexp-in-string
	    (format ":%s" (car pair)) ; XXX this is the issue change $ -> :
	    (let ((val (cdr pair)))
              (if (listp val)
                  (let ((data-file (org-babel-temp-file "sql-data-")))
                    (with-temp-file data-file
                      (insert (orgtbl-to-csv
                               val (if sqlite
                                       nil
                                     '(:fmt (lambda (el) (if (stringp el)
                                                        el
                                                      (format "%S" el))))))))
                    data-file)
                (if (stringp val) val (format "%S" val))))
	    body t t)))
   vars)
  body)

(defun fix-ocbe-queries () ; FIXME LOL yeah name collisions DO happen and YES this is why I implemented `defvar-local'
  (setq-local
   org-confirm-babel-evaluate
   (lambda (lang body)
     ;;(message "%S" body)
     (not
      (or
       (string-prefix-p "; elisp-safe-block" body)
       (member lang '("sql")))))))

(fix-ocbe-queries)
#+end_src

** Local Variables :ARCHIVE:
# close powershell comment #>
# Local Variables:
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((a (org-version)) (n orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not n) (string< n a) (string= n a) (error "Your Org is too old! %s < %s" a n))) (defun orgstrap-norm-func--dprp-1-0 (body) (let ((p (read (concat "(progn\n" body "\n)"))) (m '(defun defun-local defmacro defvar defvar-local defconst defcustom)) print-quoted print-length print-level) (cl-labels ((f (b) (cl-loop for e in b when (listp e) do (or (and (memq (car e) m) (let ((n (nthcdr 4 e))) (and (stringp (nth 3 e)) (or (cl-subseq m 3) n) (f n) (or (setcdr (cddr e) n) t)))) (f e))) p)) (prin1-to-string (f p))))) (unless (boundp 'orgstrap-norm-func) (defvar-local orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap--confirm-eval-minimal (lang body) (not (and (member lang '("elisp" "emacs-lisp")) (eq orgstrap-block-checksum (intern (secure-hash orgstrap-cypher (orgstrap-norm body))))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-minimal)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (when (eq org-confirm-babel-evaluate #'orgstrap--confirm-eval) (setq-local org-confirm-babel-evaluate ocbe)) (ignore-errors (org-set-visibility-according-to-property))) (warn "No orgstrap block."))))
# End:
